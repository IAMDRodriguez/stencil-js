/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BadgeColor, BadgePosition, BadgeVariant } from "./components/badge-component/badge.data";
export { BadgeColor, BadgePosition, BadgeVariant } from "./components/badge-component/badge.data";
export namespace Components {
    interface EmersonBadgeComponent {
        "color": BadgeColor;
        "position": BadgePosition;
        "text": string;
        "variant": BadgeVariant;
    }
    interface EmersonBanner {
        "action": boolean;
        "close": () => Promise<void>;
    }
    interface EmersonIcon {
        "name": string;
        "size": string;
    }
    interface MaterialButton {
        "clicked": () => Promise<void>;
        "disabled": boolean;
        "high__emphasis": boolean;
        "icon": string;
        "label": string;
        "low__emphasis": boolean;
        "medium__emphasis": boolean;
        "primary": boolean;
        "secondary": boolean;
    }
    interface MaterialInput {
        "label": string;
        "placeholder": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SideDrawer {
        "description": string;
        "header": string;
    }
}
export interface MaterialButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMaterialButtonElement;
}
declare global {
    interface HTMLEmersonBadgeComponentElement extends Components.EmersonBadgeComponent, HTMLStencilElement {
    }
    var HTMLEmersonBadgeComponentElement: {
        prototype: HTMLEmersonBadgeComponentElement;
        new (): HTMLEmersonBadgeComponentElement;
    };
    interface HTMLEmersonBannerElement extends Components.EmersonBanner, HTMLStencilElement {
    }
    var HTMLEmersonBannerElement: {
        prototype: HTMLEmersonBannerElement;
        new (): HTMLEmersonBannerElement;
    };
    interface HTMLEmersonIconElement extends Components.EmersonIcon, HTMLStencilElement {
    }
    var HTMLEmersonIconElement: {
        prototype: HTMLEmersonIconElement;
        new (): HTMLEmersonIconElement;
    };
    interface HTMLMaterialButtonElementEventMap {
        "buttonClicked": any;
    }
    interface HTMLMaterialButtonElement extends Components.MaterialButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMaterialButtonElementEventMap>(type: K, listener: (this: HTMLMaterialButtonElement, ev: MaterialButtonCustomEvent<HTMLMaterialButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMaterialButtonElementEventMap>(type: K, listener: (this: HTMLMaterialButtonElement, ev: MaterialButtonCustomEvent<HTMLMaterialButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMaterialButtonElement: {
        prototype: HTMLMaterialButtonElement;
        new (): HTMLMaterialButtonElement;
    };
    interface HTMLMaterialInputElement extends Components.MaterialInput, HTMLStencilElement {
    }
    var HTMLMaterialInputElement: {
        prototype: HTMLMaterialInputElement;
        new (): HTMLMaterialInputElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSideDrawerElement extends Components.SideDrawer, HTMLStencilElement {
    }
    var HTMLSideDrawerElement: {
        prototype: HTMLSideDrawerElement;
        new (): HTMLSideDrawerElement;
    };
    interface HTMLElementTagNameMap {
        "emerson-badge-component": HTMLEmersonBadgeComponentElement;
        "emerson-banner": HTMLEmersonBannerElement;
        "emerson-icon": HTMLEmersonIconElement;
        "material-button": HTMLMaterialButtonElement;
        "material-input": HTMLMaterialInputElement;
        "my-component": HTMLMyComponentElement;
        "side-drawer": HTMLSideDrawerElement;
    }
}
declare namespace LocalJSX {
    interface EmersonBadgeComponent {
        "color"?: BadgeColor;
        "position"?: BadgePosition;
        "text"?: string;
        "variant"?: BadgeVariant;
    }
    interface EmersonBanner {
        "action"?: boolean;
    }
    interface EmersonIcon {
        "name"?: string;
        "size"?: string;
    }
    interface MaterialButton {
        "disabled"?: boolean;
        "high__emphasis"?: boolean;
        "icon"?: string;
        "label"?: string;
        "low__emphasis"?: boolean;
        "medium__emphasis"?: boolean;
        "onButtonClicked"?: (event: MaterialButtonCustomEvent<any>) => void;
        "primary"?: boolean;
        "secondary"?: boolean;
    }
    interface MaterialInput {
        "label"?: string;
        "placeholder"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SideDrawer {
        "description"?: string;
        "header"?: string;
    }
    interface IntrinsicElements {
        "emerson-badge-component": EmersonBadgeComponent;
        "emerson-banner": EmersonBanner;
        "emerson-icon": EmersonIcon;
        "material-button": MaterialButton;
        "material-input": MaterialInput;
        "my-component": MyComponent;
        "side-drawer": SideDrawer;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "emerson-badge-component": LocalJSX.EmersonBadgeComponent & JSXBase.HTMLAttributes<HTMLEmersonBadgeComponentElement>;
            "emerson-banner": LocalJSX.EmersonBanner & JSXBase.HTMLAttributes<HTMLEmersonBannerElement>;
            "emerson-icon": LocalJSX.EmersonIcon & JSXBase.HTMLAttributes<HTMLEmersonIconElement>;
            "material-button": LocalJSX.MaterialButton & JSXBase.HTMLAttributes<HTMLMaterialButtonElement>;
            "material-input": LocalJSX.MaterialInput & JSXBase.HTMLAttributes<HTMLMaterialInputElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "side-drawer": LocalJSX.SideDrawer & JSXBase.HTMLAttributes<HTMLSideDrawerElement>;
        }
    }
}
